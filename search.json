[{"path":"https://krlmlr.github.io/duckplyr/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2023 duckplyr authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://krlmlr.github.io/duckplyr/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Hannes Mühleisen. Author. Kirill Müller. Author, maintainer. Posit Software, PBC. Copyright holder, funder.","code":""},{"path":"https://krlmlr.github.io/duckplyr/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Mühleisen H, Müller K (2023). duckplyr: Alternative Implementations Grammar Data Manipulations. https://github.com/krlmlr/duckplyr, https://krlmlr.github.io/duckplyr/.","code":"@Manual{,   title = {duckplyr: Alternative Implementations of the Grammar of Data Manipulations},   author = {Hannes Mühleisen and Kirill Müller},   year = {2023},   note = {https://github.com/krlmlr/duckplyr, https://krlmlr.github.io/duckplyr/}, }"},{"path":"https://krlmlr.github.io/duckplyr/index.html","id":"duckplyr","dir":"","previous_headings":"","what":"Alternative Implementations of the Grammar of Data Manipulations","title":"Alternative Implementations of the Grammar of Data Manipulations","text":"goal duckplyr define set generics provide low-level implementer’s interface dplyr’s high-level user interface.","code":""},{"path":"https://krlmlr.github.io/duckplyr/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Alternative Implementations of the Grammar of Data Manipulations","text":"CRAN, can install duckplyr : can also install development version duckplyr GitHub :","code":"install.packages(\"duckplyr\") # install.packages(\"pak\", repos = sprintf(\"https://r-lib.github.io/p/pak/stable/%s/%s/%s\", .Platform$pkgType, R.Version()$os, R.Version()$arch)) pak::pak(\"krlmlr/duckplyr\")"},{"path":"https://krlmlr.github.io/duckplyr/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Alternative Implementations of the Grammar of Data Manipulations","text":"package provides generics, packages may implement methods.","code":"library(duckplyr)  new_dfrel <- function(x) {   stopifnot(is.data.frame(x))   new_relational(list(x), class = \"dfrel\") } mtcars_rel <- new_dfrel(mtcars[1:5, 1:4])  rel_to_df.dfrel <- function(rel, ...) {   unclass(rel)[[1]] } rel_to_df(mtcars_rel) #>                    mpg cyl disp  hp #> Mazda RX4         21.0   6  160 110 #> Mazda RX4 Wag     21.0   6  160 110 #> Datsun 710        22.8   4  108  93 #> Hornet 4 Drive    21.4   6  258 110 #> Hornet Sportabout 18.7   8  360 175  rel_filter.dfrel <- function(rel, exprs, ...) {   df <- unclass(rel)[[1]]    # A real implementation would evaluate the predicates defined   # by the exprs argument   new_dfrel(df[sample.int(nrow(df), 3, replace = TRUE), ]) }  rel_filter(   mtcars_rel,   list(     relexpr_function(       \"gt\",       list(relexpr_reference(\"cyl\"), relexpr_constant(\"6\"))     )   ) ) #> [[1]] #>                  mpg cyl disp  hp #> Mazda RX4 Wag   21.0   6  160 110 #> Mazda RX4 Wag.1 21.0   6  160 110 #> Datsun 710      22.8   4  108  93 #>  #> attr(,\"class\") #> [1] \"dfrel\"      \"relational\"  rel_project.dfrel <- function(rel, exprs, ...) {   df <- unclass(rel)[[1]]    # A real implementation would evaluate the expressions defined   # by the exprs argument   new_dfrel(df[seq_len(min(3, ncol(df)))]) }  rel_project(   mtcars_rel,   list(relexpr_reference(\"cyl\"), relexpr_reference(\"disp\")) ) #> [[1]] #>                    mpg cyl disp #> Mazda RX4         21.0   6  160 #> Mazda RX4 Wag     21.0   6  160 #> Datsun 710        22.8   4  108 #> Hornet 4 Drive    21.4   6  258 #> Hornet Sportabout 18.7   8  360 #>  #> attr(,\"class\") #> [1] \"dfrel\"      \"relational\"  rel_order.dfrel <- function(rel, exprs, ...) {   df <- unclass(rel)[[1]]    # A real implementation would evaluate the expressions defined   # by the exprs argument   new_dfrel(df[order(df[[1]]), ]) }  rel_order(   mtcars_rel,   list(relexpr_reference(\"mpg\")) ) #> [[1]] #>                    mpg cyl disp  hp #> Hornet Sportabout 18.7   8  360 175 #> Mazda RX4         21.0   6  160 110 #> Mazda RX4 Wag     21.0   6  160 110 #> Hornet 4 Drive    21.4   6  258 110 #> Datsun 710        22.8   4  108  93 #>  #> attr(,\"class\") #> [1] \"dfrel\"      \"relational\" rel_join.dfrel <- function(left, right, conds, join, ...) {   left_df <- unclass(left)[[1]]   right_df <- unclass(right)[[1]]    # A real implementation would evaluate the expressions   # defined by the conds argument,   # use different join types based on the join argument,   # and implement the join itself instead of relaying to left_join().   new_dfrel(dplyr::left_join(left_df, right_df)) }  rel_join(new_dfrel(data.frame(mpg = 21)), mtcars_rel) #> Joining with `by = join_by(mpg)` #> [[1]] #>   mpg cyl disp  hp #> 1  21   6  160 110 #> 2  21   6  160 110 #>  #> attr(,\"class\") #> [1] \"dfrel\"      \"relational\"  rel_limit.dfrel <- function(rel, n, ...) {   df <- unclass(rel)[[1]]    new_dfrel(df[seq_len(n), ]) }  rel_limit(mtcars_rel, 3) #> [[1]] #>                mpg cyl disp  hp #> Mazda RX4     21.0   6  160 110 #> Mazda RX4 Wag 21.0   6  160 110 #> Datsun 710    22.8   4  108  93 #>  #> attr(,\"class\") #> [1] \"dfrel\"      \"relational\"  rel_distinct.dfrel <- function(rel, ...) {   df <- unclass(rel)[[1]]    new_dfrel(df[!duplicated(df), ]) }  rel_distinct(new_dfrel(mtcars[1:3, 1:4])) #> [[1]] #>             mpg cyl disp  hp #> Mazda RX4  21.0   6  160 110 #> Datsun 710 22.8   4  108  93 #>  #> attr(,\"class\") #> [1] \"dfrel\"      \"relational\"  rel_names.dfrel <- function(rel, ...) {   df <- unclass(rel)[[1]]    names(df) }  rel_names(mtcars_rel) #> [1] \"mpg\"  \"cyl\"  \"disp\" \"hp\""},{"path":"https://krlmlr.github.io/duckplyr/reference/expr.html","id":null,"dir":"Reference","previous_headings":"","what":"Relational expressions — expr","title":"Relational expressions — expr","text":"functions provide backend-agnostic way construct expression trees built column references, constants, functions. subexpressions expression tree can alias. new_relexpr() constructs object class \"relational_relexpr\". used higher-level constructors, users rarely need call directly. relexpr_reference() constructs reference column. relexpr_constant() wraps constant value. relexpr_function() applies function. arguments function list expression objects. relexpr_set_alias() updates alias relational expression.","code":""},{"path":"https://krlmlr.github.io/duckplyr/reference/expr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Relational expressions — expr","text":"","code":"new_relexpr(x, class = NULL)  relexpr_reference(name, rel = NULL, alias = NULL)  relexpr_constant(val, alias = NULL)  relexpr_function(name, args, alias = NULL)  relexpr_set_alias(expr, alias = NULL)"},{"path":"https://krlmlr.github.io/duckplyr/reference/expr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Relational expressions — expr","text":"x object. class Classes added front \"relational_relexpr\" base class. name name column function reference. rel name relation reference. alias alias new expression. val value use constant expression. args Function arguments, list expr objects. expr expr object.","code":""},{"path":"https://krlmlr.github.io/duckplyr/reference/expr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Relational expressions — expr","text":"object class \"relational_relexpr\" object class \"relational_relexpr\" object class \"relational_relexpr\" object class \"relational_relexpr\" object class \"relational_relexpr\"","code":""},{"path":"https://krlmlr.github.io/duckplyr/reference/expr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Relational expressions — expr","text":"","code":"relexpr_set_alias(alias = \"my_predicate\",   relexpr_function(\"<\",     list(       relexpr_reference(\"my_number\"),       relexpr_constant(42)     )   ) ) #> List of 3 #>  $ name : chr \"<\" #>  $ args :List of 2 #>   ..$ :List of 3 #>   .. ..$ name : chr \"my_number\" #>   .. ..$ rel  : NULL #>   .. ..$ alias: NULL #>   .. ..- attr(*, \"class\")= chr [1:2] \"relational_relexpr_reference\" \"relational_relexpr\" #>   ..$ :List of 2 #>   .. ..$ val  : num 42 #>   .. ..$ alias: NULL #>   .. ..- attr(*, \"class\")= chr [1:2] \"relational_relexpr_constant\" \"relational_relexpr\" #>  $ alias: chr \"my_predicate\" #>  - attr(*, \"class\")= chr [1:2] \"relational_relexpr_function\" \"relational_relexpr\""},{"path":"https://krlmlr.github.io/duckplyr/reference/relational.html","id":null,"dir":"Reference","previous_headings":"","what":"Relational implementer's interface — relational","title":"Relational implementer's interface — relational","text":"constructor generics described define class helps separating dplyr's user interface actual underlying operations. longer term, help packages implement dplyr interface (dbplyr, dtplyr, arrow similar) focus core details functionality, rather intricacies dplyr's user interface. new_relational() constructs object class \"relational\". Users encouraged provide class argument. typical use case create wrapper function. rel_to_df() extracts data frame representation relational object, used dplyr::collect(). rel_filter() keeps rows match predicate, used dplyr::filter(). rel_project() selects columns creates new columns, used dplyr::select(), dplyr::rename(), dplyr::mutate(), dplyr::relocate(), others. rel_aggregate() combines several rows one, used dplyr::summarize(). rel_order() reorders rows columns expressions, used dplyr::arrange(). rel_join() joins merges two tables, used dplyr::left_join(), dplyr::right_join(), dplyr::inner_join(), dplyr::full_join(), dplyr::cross_join(), dplyr::semi_join(), dplyr::anti_join(). rel_limit() limits number rows table, used utils::head(). rel_distinct() keeps distinct rows table, used dplyr::distinct(). rel_set_intersect() returns rows present tables, used intersect(). rel_set_diff() returns rows present tables, used setdiff(). rel_set_symdiff() returns rows present tables, used dplyr::symdiff(). rel_union_all() returns rows present tables, used dplyr::union_all(). rel_names() returns column names character vector, used colnames().","code":""},{"path":"https://krlmlr.github.io/duckplyr/reference/relational.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Relational implementer's interface — relational","text":"","code":"new_relational(..., class = NULL)  rel_to_df(rel, ...)  rel_filter(rel, exprs, ...)  rel_project(rel, exprs, ...)  rel_aggregate(rel, groups, aggregates, ...)  rel_order(rel, orders, ...)  rel_join(   left,   right,   conds,   join = c(\"inner\", \"left\", \"right\", \"outer\", \"cross\", \"semi\", \"anti\"),   ... )  rel_limit(rel, n, ...)  rel_distinct(rel, ...)  rel_set_intersect(rel_a, rel_b, ...)  rel_set_diff(rel_a, rel_b, ...)  rel_set_symdiff(rel_a, rel_b, ...)  rel_union_all(rel_a, rel_b, ...)  rel_names(rel, ...)"},{"path":"https://krlmlr.github.io/duckplyr/reference/relational.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Relational implementer's interface — relational","text":"... Reserved future extensions, must empty. class Classes added front \"relational\" base class. rel, rel_a, rel_b, left, right relational object. exprs list expr objects filter . groups list expressions group . aggregates list expressions aggregates compute. orders list expressions order . conds list expressions use join. join type join. n number rows.","code":""},{"path":"https://krlmlr.github.io/duckplyr/reference/relational.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Relational implementer's interface — relational","text":"new_relational() returns new relational object. rel_to_df() returns data frame. rel_names() returns character vector. generics return modified relational object.","code":""},{"path":"https://krlmlr.github.io/duckplyr/reference/relational.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Relational implementer's interface — relational","text":"","code":"new_dfrel <- function(x) {   stopifnot(is.data.frame(x))   new_relational(list(x), class = \"dfrel\") } mtcars_rel <- new_dfrel(mtcars[1:5, 1:4])  rel_to_df.dfrel <- function(rel, ...) {   unclass(rel)[[1]] } rel_to_df(mtcars_rel) #>                    mpg cyl disp  hp #> Mazda RX4         21.0   6  160 110 #> Mazda RX4 Wag     21.0   6  160 110 #> Datsun 710        22.8   4  108  93 #> Hornet 4 Drive    21.4   6  258 110 #> Hornet Sportabout 18.7   8  360 175  rel_filter.dfrel <- function(rel, exprs, ...) {   df <- unclass(rel)[[1]]    # A real implementation would evaluate the predicates defined   # by the exprs argument   new_dfrel(df[sample.int(nrow(df), 3, replace = TRUE), ]) }  rel_filter(   mtcars_rel,   list(     relexpr_function(       \"gt\",       list(relexpr_reference(\"cyl\"), relexpr_constant(\"6\"))     )   ) ) #> [[1]] #>                    mpg cyl disp  hp #> Datsun 710        22.8   4  108  93 #> Hornet Sportabout 18.7   8  360 175 #> Datsun 710.1      22.8   4  108  93 #>  #> attr(,\"class\") #> [1] \"dfrel\"      \"relational\"  rel_project.dfrel <- function(rel, exprs, ...) {   df <- unclass(rel)[[1]]    # A real implementation would evaluate the expressions defined   # by the exprs argument   new_dfrel(df[seq_len(min(3, ncol(df)))]) }  rel_project(   mtcars_rel,   list(relexpr_reference(\"cyl\"), relexpr_reference(\"disp\")) ) #> [[1]] #>                    mpg cyl disp #> Mazda RX4         21.0   6  160 #> Mazda RX4 Wag     21.0   6  160 #> Datsun 710        22.8   4  108 #> Hornet 4 Drive    21.4   6  258 #> Hornet Sportabout 18.7   8  360 #>  #> attr(,\"class\") #> [1] \"dfrel\"      \"relational\"  rel_order.dfrel <- function(rel, exprs, ...) {   df <- unclass(rel)[[1]]    # A real implementation would evaluate the expressions defined   # by the exprs argument   new_dfrel(df[order(df[[1]]), ]) }  rel_order(   mtcars_rel,   list(relexpr_reference(\"mpg\")) ) #> [[1]] #>                    mpg cyl disp  hp #> Hornet Sportabout 18.7   8  360 175 #> Mazda RX4         21.0   6  160 110 #> Mazda RX4 Wag     21.0   6  160 110 #> Hornet 4 Drive    21.4   6  258 110 #> Datsun 710        22.8   4  108  93 #>  #> attr(,\"class\") #> [1] \"dfrel\"      \"relational\" rel_join.dfrel <- function(left, right, conds, join, ...) {   left_df <- unclass(left)[[1]]   right_df <- unclass(right)[[1]]    # A real implementation would evaluate the expressions   # defined by the conds argument,   # use different join types based on the join argument,   # and implement the join itself instead of relaying to left_join().   new_dfrel(dplyr::left_join(left_df, right_df)) }  rel_join(new_dfrel(data.frame(mpg = 21)), mtcars_rel) #> Joining with `by = join_by(mpg)` #> [[1]] #>   mpg cyl disp  hp #> 1  21   6  160 110 #> 2  21   6  160 110 #>  #> attr(,\"class\") #> [1] \"dfrel\"      \"relational\"  rel_limit.dfrel <- function(rel, n, ...) {   df <- unclass(rel)[[1]]    new_dfrel(df[seq_len(n), ]) }  rel_limit(mtcars_rel, 3) #> [[1]] #>                mpg cyl disp  hp #> Mazda RX4     21.0   6  160 110 #> Mazda RX4 Wag 21.0   6  160 110 #> Datsun 710    22.8   4  108  93 #>  #> attr(,\"class\") #> [1] \"dfrel\"      \"relational\"  rel_distinct.dfrel <- function(rel, ...) {   df <- unclass(rel)[[1]]    new_dfrel(df[!duplicated(df), ]) }  rel_distinct(new_dfrel(mtcars[1:3, 1:4])) #> [[1]] #>             mpg cyl disp  hp #> Mazda RX4  21.0   6  160 110 #> Datsun 710 22.8   4  108  93 #>  #> attr(,\"class\") #> [1] \"dfrel\"      \"relational\"  rel_names.dfrel <- function(rel, ...) {   df <- unclass(rel)[[1]]    names(df) }  rel_names(mtcars_rel) #> [1] \"mpg\"  \"cyl\"  \"disp\" \"hp\""},{"path":"https://krlmlr.github.io/duckplyr/news/index.html","id":"duckplyr-010-2023-07-03","dir":"Changelog","previous_headings":"","what":"duckplyr 0.1.0 (2023-07-03)","title":"duckplyr 0.1.0 (2023-07-03)","text":"CRAN release: 2023-07-07","code":""},{"path":"https://krlmlr.github.io/duckplyr/news/index.html","id":"bug-fixes-0-1-0","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"duckplyr 0.1.0 (2023-07-03)","text":"Fix examples.","code":""},{"path":"https://krlmlr.github.io/duckplyr/news/index.html","id":"chore-0-1-0","dir":"Changelog","previous_headings":"","what":"Chore","title":"duckplyr 0.1.0 (2023-07-03)","text":"Add CRAN install instructions. Satisfy R CMD check. Document argument. Error NOTE. Remove relexpr_window() now.","code":""},{"path":"https://krlmlr.github.io/duckplyr/news/index.html","id":"documentation-0-1-0","dir":"Changelog","previous_headings":"","what":"Documentation","title":"duckplyr 0.1.0 (2023-07-03)","text":"Clean reference.","code":""},{"path":"https://krlmlr.github.io/duckplyr/news/index.html","id":"uncategorized-0-1-0","dir":"Changelog","previous_headings":"","what":"Uncategorized","title":"duckplyr 0.1.0 (2023-07-03)","text":"Initial version, exporting: - new_relational() construct objects class \"relational\" - Generics rel_aggregate(), rel_distinct(), rel_filter(), rel_join(), rel_limit(), rel_names(), rel_order(), rel_project(), rel_set_diff(), rel_set_intersect(), rel_set_symdiff(), rel_to_df(), rel_union_all() - new_relexpr() construct objects class \"relational_relexpr\" - Expression builders relexpr_constant(), relexpr_function(), relexpr_reference(), relexpr_set_alias(), relexpr_window()","code":""}]
