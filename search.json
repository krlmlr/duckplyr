[{"path":"https://krlmlr.github.io/duckplyr/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2023 duckplyr authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://krlmlr.github.io/duckplyr/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Hannes Mühleisen. Author. Kirill Müller. Author, maintainer. Posit Software, PBC. Copyright holder, funder.","code":""},{"path":"https://krlmlr.github.io/duckplyr/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Mühleisen H, Müller K (2023). duckplyr: Relational API Alternative 'dplyr' Implementations. https://github.com/krlmlr/duckplyr, https://krlmlr.github.io/duckplyr/.","code":"@Manual{,   title = {duckplyr: Relational API for Alternative 'dplyr' Implementations},   author = {Hannes Mühleisen and Kirill Müller},   year = {2023},   note = {https://github.com/krlmlr/duckplyr, https://krlmlr.github.io/duckplyr/}, }"},{"path":"https://krlmlr.github.io/duckplyr/index.html","id":"duckplyr","dir":"","previous_headings":"","what":"Relational API for Alternative dplyr Implementations","title":"Relational API for Alternative dplyr Implementations","text":"goal duckplyr …","code":""},{"path":"https://krlmlr.github.io/duckplyr/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Relational API for Alternative dplyr Implementations","text":"can install development version duckplyr GitHub :","code":"# install.packages(\"pak\", repos = sprintf(\"https://r-lib.github.io/p/pak/stable/%s/%s/%s\", .Platform$pkgType, R.Version()$os, R.Version()$arch)) pak::pak(\"duckdblabs/duckplyr\")"},{"path":"https://krlmlr.github.io/duckplyr/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Relational API for Alternative dplyr Implementations","text":"basic example shows solve common problem:","code":"library(duckdb) #> Loading required package: DBI library(duckplyr)  # Use `as_duckplyr_df()` to enable processing with duckdb: out <-    palmerpenguins::penguins %>%    as_duckplyr_df() %>%    transmute(bill_area = bill_length_mm * bill_depth_mm, bill_length_mm, species, sex) %>%   filter(bill_length_mm < 40) %>%   select(-bill_length_mm)  # The result is a data frame or tibble, with its own class. class(out) #> [1] \"duckplyr_df\" \"tbl_df\"      \"tbl\"         \"data.frame\" names(out) #> [1] \"bill_area\" \"species\"   \"sex\"  # duckdb is responsible for eventually carrying out the operations: out %>%    explain() #> ┌───────────────────────────┐ #> │         PROJECTION        │ #> │   ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─   │ #> │         bill_area         │ #> │          species          │ #> │            sex            │ #> └─────────────┬─────────────┘                              #> ┌─────────────┴─────────────┐ #> │           FILTER          │ #> │   ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─   │ #> │  (bill_length_mm < 40.0)  │ #> └─────────────┬─────────────┘                              #> ┌─────────────┴─────────────┐ #> │      R_DATAFRAME_SCAN     │ #> │   ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─   │ #> │         data.frame        │ #> │   ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─   │ #> │           EC=344          │ #> └───────────────────────────┘  # The contents of this data frame are computed only upon request: out #> materializing: #> --------------------- #> --- Relation Tree --- #> --------------------- #> Projection [bill_area as bill_area, species as species, sex as sex] #>   Filter [<(bill_length_mm, 40.0)] #>     Projection [*(bill_length_mm, bill_depth_mm) as bill_area, bill_length_mm as bill_length_mm, species as species, sex as sex] #>       r_dataframe_scan(0x12c0a8a58) #>  #> --------------------- #> -- Result Columns  -- #> --------------------- #> - bill_area (DOUBLE) #> - species (species) #> - sex (sex) #>  #> # A tibble: 100 × 3 #>    bill_area species sex    #>        <dbl> <fct>   <fct>  #>  1      731. Adelie  male   #>  2      687. Adelie  female #>  3      708. Adelie  female #>  4      810. Adelie  male   #>  5      692. Adelie  female #>  6      768. Adelie  male   #>  7      617. Adelie  NA     #>  8      646. Adelie  NA     #>  9      654. Adelie  NA     #> 10      818. Adelie  male   #> # … with 90 more rows  # Once computed, the results remain available as a data frame: out #> # A tibble: 100 × 3 #>    bill_area species sex    #>        <dbl> <fct>   <fct>  #>  1      731. Adelie  male   #>  2      687. Adelie  female #>  3      708. Adelie  female #>  4      810. Adelie  male   #>  5      692. Adelie  female #>  6      768. Adelie  male   #>  7      617. Adelie  NA     #>  8      646. Adelie  NA     #>  9      654. Adelie  NA     #> 10      818. Adelie  male   #> # … with 90 more rows"},{"path":"https://krlmlr.github.io/duckplyr/reference/new_relational.html","id":null,"dir":"Reference","previous_headings":"","what":"Relational API — new_relational","title":"Relational API — new_relational","text":"TBD.","code":""},{"path":"https://krlmlr.github.io/duckplyr/reference/new_relational.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Relational API — new_relational","text":"","code":"new_relational(..., class = NULL)"},{"path":"https://krlmlr.github.io/duckplyr/reference/new_relational.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Relational API — new_relational","text":"... Passed [structure()] class Classes added front `\"relational\"` base class","code":""},{"path":"https://krlmlr.github.io/duckplyr/reference/rel.html","id":null,"dir":"Reference","previous_headings":"","what":"TBD — rel_tostring","title":"TBD — rel_tostring","text":"TBD.","code":""},{"path":"https://krlmlr.github.io/duckplyr/reference/rel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"TBD — rel_tostring","text":"","code":"rel_tostring(rel, ...)  rel_names(rel, ...)"},{"path":"https://krlmlr.github.io/duckplyr/reference/rel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"TBD — rel_tostring","text":"rel relation object. ... Reserved future extensions, must empty.","code":""},{"path":"https://krlmlr.github.io/duckplyr/reference/rel_aggregate.html","id":null,"dir":"Reference","previous_headings":"","what":"Lazily aggregate a relation object — rel_aggregate","title":"Lazily aggregate a relation object — rel_aggregate","text":"TBD.","code":""},{"path":"https://krlmlr.github.io/duckplyr/reference/rel_aggregate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Lazily aggregate a relation object — rel_aggregate","text":"","code":"rel_aggregate(rel, groups, aggregates, ...)"},{"path":"https://krlmlr.github.io/duckplyr/reference/rel_aggregate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Lazily aggregate a relation object — rel_aggregate","text":"rel relation object. groups list DuckDB expressions group aggregates (optionally named) list DuckDB expressions aggregates compute ... Reserved future extensions, must empty.","code":""},{"path":"https://krlmlr.github.io/duckplyr/reference/rel_aggregate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Lazily aggregate a relation object — rel_aggregate","text":"now aggregated relation object","code":""},{"path":"https://krlmlr.github.io/duckplyr/reference/rel_aggregate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Lazily aggregate a relation object — rel_aggregate","text":"","code":"if (FALSE) { rel <- rel_from_df(mtcars) aggrs <- list(avg_hp = relexpr_function(\"avg\", list(relexpr_reference(\"hp\")))) rel2 <- rel_aggregate(rel, list(relexpr_reference(\"cyl\")), aggrs) }"},{"path":"https://krlmlr.github.io/duckplyr/reference/rel_alias.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the internal alias for a relation object — rel_alias","title":"Get the internal alias for a relation object — rel_alias","text":"TBD.","code":""},{"path":"https://krlmlr.github.io/duckplyr/reference/rel_alias.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the internal alias for a relation object — rel_alias","text":"","code":"rel_alias(rel, ...)"},{"path":"https://krlmlr.github.io/duckplyr/reference/rel_alias.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the internal alias for a relation object — rel_alias","text":"rel relation object. ... Reserved future extensions, must empty.","code":""},{"path":"https://krlmlr.github.io/duckplyr/reference/rel_alias.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the internal alias for a relation object — rel_alias","text":"","code":"if (FALSE) { rel <- rel_from_df(mtcars) rel_alias(rel) }"},{"path":"https://krlmlr.github.io/duckplyr/reference/rel_distinct.html","id":null,"dir":"Reference","previous_headings":"","what":"Lazily compute a distinct result on a relation object — rel_distinct","title":"Lazily compute a distinct result on a relation object — rel_distinct","text":"TBD.","code":""},{"path":"https://krlmlr.github.io/duckplyr/reference/rel_distinct.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Lazily compute a distinct result on a relation object — rel_distinct","text":"","code":"rel_distinct(rel, ...)"},{"path":"https://krlmlr.github.io/duckplyr/reference/rel_distinct.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Lazily compute a distinct result on a relation object — rel_distinct","text":"rel relation object. ... Reserved future extensions, must empty.","code":""},{"path":"https://krlmlr.github.io/duckplyr/reference/rel_distinct.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Lazily compute a distinct result on a relation object — rel_distinct","text":"new relation object distinct rows","code":""},{"path":"https://krlmlr.github.io/duckplyr/reference/rel_distinct.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Lazily compute a distinct result on a relation object — rel_distinct","text":"","code":"if (FALSE) { rel <- rel_from_df(mtcars) rel2 <- rel_distinct(rel) }"},{"path":"https://krlmlr.github.io/duckplyr/reference/rel_explain.html","id":null,"dir":"Reference","previous_headings":"","what":"Print the EXPLAIN output for a relation object — rel_explain","title":"Print the EXPLAIN output for a relation object — rel_explain","text":"TBD.","code":""},{"path":"https://krlmlr.github.io/duckplyr/reference/rel_explain.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print the EXPLAIN output for a relation object — rel_explain","text":"","code":"rel_explain(rel, ...)"},{"path":"https://krlmlr.github.io/duckplyr/reference/rel_explain.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print the EXPLAIN output for a relation object — rel_explain","text":"rel relation object. ... Reserved future extensions, must empty.","code":""},{"path":"https://krlmlr.github.io/duckplyr/reference/rel_explain.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print the EXPLAIN output for a relation object — rel_explain","text":"","code":"if (FALSE) { rel <- rel_from_df(mtcars) rel_explain(rel) }"},{"path":"https://krlmlr.github.io/duckplyr/reference/rel_filter.html","id":null,"dir":"Reference","previous_headings":"","what":"Lazily filter a relation object — rel_filter","title":"Lazily filter a relation object — rel_filter","text":"TBD.","code":""},{"path":"https://krlmlr.github.io/duckplyr/reference/rel_filter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Lazily filter a relation object — rel_filter","text":"","code":"rel_filter(rel, exprs, ...)"},{"path":"https://krlmlr.github.io/duckplyr/reference/rel_filter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Lazily filter a relation object — rel_filter","text":"rel relation object. exprs list DuckDB expressions filter ... Reserved future extensions, must empty.","code":""},{"path":"https://krlmlr.github.io/duckplyr/reference/rel_filter.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Lazily filter a relation object — rel_filter","text":"now filtered relation object","code":""},{"path":"https://krlmlr.github.io/duckplyr/reference/rel_filter.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Lazily filter a relation object — rel_filter","text":"","code":"if (FALSE) { rel <- rel_from_df(mtcars) rel2 <- rel_filter(   rel,   list(     relexpr_function(       \"gt\",       list(relexpr_reference(\"cyl\"), relexpr_constant(\"6\")))   ) ) }"},{"path":"https://krlmlr.github.io/duckplyr/reference/rel_join.html","id":null,"dir":"Reference","previous_headings":"","what":"Lazily INNER join two relation objects — rel_join","title":"Lazily INNER join two relation objects — rel_join","text":"TBD.","code":""},{"path":"https://krlmlr.github.io/duckplyr/reference/rel_join.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Lazily INNER join two relation objects — rel_join","text":"","code":"rel_join(left, right, conds, join, ...)"},{"path":"https://krlmlr.github.io/duckplyr/reference/rel_join.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Lazily INNER join two relation objects — rel_join","text":"left left-hand-side relation object right right-hand-side relation object conds list DuckDB expressions use join join type join ... Reserved future extensions, must empty.","code":""},{"path":"https://krlmlr.github.io/duckplyr/reference/rel_join.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Lazily INNER join two relation objects — rel_join","text":"new relation object resulting join","code":""},{"path":"https://krlmlr.github.io/duckplyr/reference/rel_join.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Lazily INNER join two relation objects — rel_join","text":"","code":"if (FALSE) { if (FALSE) { left <- rel_from_df(mtcars) right <- rel_from_df(mtcars) cond <- list(   relexpr_function(     \"eq\",     list(relexpr_reference(\"cyl\", left), relexpr_reference(\"cyl\", right))   ) ) rel2 <- rel_join(left, right, cond) } }"},{"path":"https://krlmlr.github.io/duckplyr/reference/rel_limit.html","id":null,"dir":"Reference","previous_headings":"","what":"Lazily limit the rows in a relation object — rel_limit","title":"Lazily limit the rows in a relation object — rel_limit","text":"TBD.","code":""},{"path":"https://krlmlr.github.io/duckplyr/reference/rel_limit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Lazily limit the rows in a relation object — rel_limit","text":"","code":"rel_limit(rel, n, ...)"},{"path":"https://krlmlr.github.io/duckplyr/reference/rel_limit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Lazily limit the rows in a relation object — rel_limit","text":"rel relation object. n number rows. ... Reserved future extensions, must empty.","code":""},{"path":"https://krlmlr.github.io/duckplyr/reference/rel_order.html","id":null,"dir":"Reference","previous_headings":"","what":"Lazily reorder a relation object — rel_order","title":"Lazily reorder a relation object — rel_order","text":"TBD.","code":""},{"path":"https://krlmlr.github.io/duckplyr/reference/rel_order.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Lazily reorder a relation object — rel_order","text":"","code":"rel_order(rel, orders, ...)"},{"path":"https://krlmlr.github.io/duckplyr/reference/rel_order.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Lazily reorder a relation object — rel_order","text":"rel relation object. orders list DuckDB expressions order ... Reserved future extensions, must empty.","code":""},{"path":"https://krlmlr.github.io/duckplyr/reference/rel_order.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Lazily reorder a relation object — rel_order","text":"now aggregated relation object","code":""},{"path":"https://krlmlr.github.io/duckplyr/reference/rel_order.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Lazily reorder a relation object — rel_order","text":"","code":"if (FALSE) { rel <- rel_from_df(mtcars) rel2 <- rel_order(rel, list(relexpr_reference(\"hp\"))) }"},{"path":"https://krlmlr.github.io/duckplyr/reference/rel_project.html","id":null,"dir":"Reference","previous_headings":"","what":"Lazily project a relation object — rel_project","title":"Lazily project a relation object — rel_project","text":"TBD.","code":""},{"path":"https://krlmlr.github.io/duckplyr/reference/rel_project.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Lazily project a relation object — rel_project","text":"","code":"rel_project(rel, exprs, ...)"},{"path":"https://krlmlr.github.io/duckplyr/reference/rel_project.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Lazily project a relation object — rel_project","text":"rel relation object. exprs list DuckDB expressions project ... Reserved future extensions, must empty.","code":""},{"path":"https://krlmlr.github.io/duckplyr/reference/rel_project.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Lazily project a relation object — rel_project","text":"now projected relation object","code":""},{"path":"https://krlmlr.github.io/duckplyr/reference/rel_project.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Lazily project a relation object — rel_project","text":"","code":"if (FALSE) { rel <- rel_from_df(mtcars) rel2 <- rel_project(rel, list(relexpr_reference(\"cyl\"), relexpr_reference(\"disp\"))) }"},{"path":"https://krlmlr.github.io/duckplyr/reference/rel_set_alias.html","id":null,"dir":"Reference","previous_headings":"","what":"Set the internal alias for a relation object — rel_set_alias","title":"Set the internal alias for a relation object — rel_set_alias","text":"TBD.","code":""},{"path":"https://krlmlr.github.io/duckplyr/reference/rel_set_alias.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set the internal alias for a relation object — rel_set_alias","text":"","code":"rel_set_alias(rel, alias, ...)"},{"path":"https://krlmlr.github.io/duckplyr/reference/rel_set_alias.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set the internal alias for a relation object — rel_set_alias","text":"rel relation object. alias new alias ... Reserved future extensions, must empty.","code":""},{"path":"https://krlmlr.github.io/duckplyr/reference/rel_set_alias.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set the internal alias for a relation object — rel_set_alias","text":"","code":"if (FALSE) { rel <- rel_from_df(mtcars) rel_set_alias(rel, \"my_new_alias\") }"},{"path":"https://krlmlr.github.io/duckplyr/reference/rel_set_diff.html","id":null,"dir":"Reference","previous_headings":"","what":"Lazily compute a set_diff result on a relation object — rel_set_diff","title":"Lazily compute a set_diff result on a relation object — rel_set_diff","text":"TBD.","code":""},{"path":"https://krlmlr.github.io/duckplyr/reference/rel_set_diff.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Lazily compute a set_diff result on a relation object — rel_set_diff","text":"","code":"rel_set_diff(rel_a, rel_b, ...)"},{"path":"https://krlmlr.github.io/duckplyr/reference/rel_set_diff.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Lazily compute a set_diff result on a relation object — rel_set_diff","text":"rel_a DuckDB relation object rel_b DuckDB relation object ... Reserved future extensions, must empty.","code":""},{"path":"https://krlmlr.github.io/duckplyr/reference/rel_set_diff.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Lazily compute a set_diff result on a relation object — rel_set_diff","text":"new relation object result","code":""},{"path":"https://krlmlr.github.io/duckplyr/reference/rel_set_diff.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Lazily compute a set_diff result on a relation object — rel_set_diff","text":"","code":"if (FALSE) { rel <- rel_from_df(mtcars) rel2 <- rel_set_diff(rel) }"},{"path":"https://krlmlr.github.io/duckplyr/reference/rel_set_intersect.html","id":null,"dir":"Reference","previous_headings":"","what":"Lazily compute a set_intersect result on a relation object — rel_set_intersect","title":"Lazily compute a set_intersect result on a relation object — rel_set_intersect","text":"TBD.","code":""},{"path":"https://krlmlr.github.io/duckplyr/reference/rel_set_intersect.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Lazily compute a set_intersect result on a relation object — rel_set_intersect","text":"","code":"rel_set_intersect(rel_a, rel_b, ...)"},{"path":"https://krlmlr.github.io/duckplyr/reference/rel_set_intersect.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Lazily compute a set_intersect result on a relation object — rel_set_intersect","text":"rel_a DuckDB relation object rel_b DuckDB relation object ... Reserved future extensions, must empty.","code":""},{"path":"https://krlmlr.github.io/duckplyr/reference/rel_set_intersect.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Lazily compute a set_intersect result on a relation object — rel_set_intersect","text":"new relation object result","code":""},{"path":"https://krlmlr.github.io/duckplyr/reference/rel_set_intersect.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Lazily compute a set_intersect result on a relation object — rel_set_intersect","text":"","code":"if (FALSE) { rel <- rel_from_df(mtcars) rel2 <- rel_set_intersect(rel) }"},{"path":"https://krlmlr.github.io/duckplyr/reference/rel_set_symdiff.html","id":null,"dir":"Reference","previous_headings":"","what":"Lazily compute a set_symdiff result on a relation object — rel_set_symdiff","title":"Lazily compute a set_symdiff result on a relation object — rel_set_symdiff","text":"TBD.","code":""},{"path":"https://krlmlr.github.io/duckplyr/reference/rel_set_symdiff.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Lazily compute a set_symdiff result on a relation object — rel_set_symdiff","text":"","code":"rel_set_symdiff(rel_a, rel_b, ...)"},{"path":"https://krlmlr.github.io/duckplyr/reference/rel_set_symdiff.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Lazily compute a set_symdiff result on a relation object — rel_set_symdiff","text":"rel_a DuckDB relation object rel_b DuckDB relation object ... Reserved future extensions, must empty.","code":""},{"path":"https://krlmlr.github.io/duckplyr/reference/rel_set_symdiff.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Lazily compute a set_symdiff result on a relation object — rel_set_symdiff","text":"new relation object result","code":""},{"path":"https://krlmlr.github.io/duckplyr/reference/rel_set_symdiff.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Lazily compute a set_symdiff result on a relation object — rel_set_symdiff","text":"","code":"if (FALSE) { rel <- rel_from_df(mtcars) rel2 <- rel_set_symdiff(rel) }"},{"path":"https://krlmlr.github.io/duckplyr/reference/rel_to_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert a relation object to a data frame — rel_to_df","title":"Convert a relation object to a data frame — rel_to_df","text":"TBD.","code":""},{"path":"https://krlmlr.github.io/duckplyr/reference/rel_to_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert a relation object to a data frame — rel_to_df","text":"","code":"rel_to_df(rel, ...)"},{"path":"https://krlmlr.github.io/duckplyr/reference/rel_to_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert a relation object to a data frame — rel_to_df","text":"rel relation object. ... Reserved future extensions, must empty.","code":""},{"path":"https://krlmlr.github.io/duckplyr/reference/rel_to_df.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert a relation object to a data frame — rel_to_df","text":"data frame.","code":""},{"path":"https://krlmlr.github.io/duckplyr/reference/rel_to_df.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert a relation object to a data frame — rel_to_df","text":"","code":"if (FALSE) { rel <- rel_from_df(mtcars) rel2 <- rel_filter(   rel,   list(     relexpr_function(       \"gt\",       list(relexpr_reference(\"cyl\"), relexpr_constant(\"6\"))    )   )  ) }"},{"path":"https://krlmlr.github.io/duckplyr/reference/rel_union_all.html","id":null,"dir":"Reference","previous_headings":"","what":"Lazily compute a set_union_all result on a relation object — rel_union_all","title":"Lazily compute a set_union_all result on a relation object — rel_union_all","text":"TBD.","code":""},{"path":"https://krlmlr.github.io/duckplyr/reference/rel_union_all.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Lazily compute a set_union_all result on a relation object — rel_union_all","text":"","code":"rel_union_all(rel_a, rel_b, ...)"},{"path":"https://krlmlr.github.io/duckplyr/reference/rel_union_all.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Lazily compute a set_union_all result on a relation object — rel_union_all","text":"rel_a DuckDB relation object rel_b DuckDB relation object ... Reserved future extensions, must empty.","code":""},{"path":"https://krlmlr.github.io/duckplyr/reference/rel_union_all.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Lazily compute a set_union_all result on a relation object — rel_union_all","text":"new relation object result","code":""},{"path":"https://krlmlr.github.io/duckplyr/reference/rel_union_all.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Lazily compute a set_union_all result on a relation object — rel_union_all","text":"","code":"if (FALSE) { rel <- rel_from_df(mtcars) rel2 <- rel_union_all(rel) }"}]
