[{"path":"https://krlmlr.github.io/duckplyr/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2023 duckplyr authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://krlmlr.github.io/duckplyr/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Hannes Mühleisen. Author. Kirill Müller. Author, maintainer. Posit Software, PBC. Copyright holder, funder.","code":""},{"path":"https://krlmlr.github.io/duckplyr/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Mühleisen H, Müller K (2023). duckplyr: Alternative Implementations Grammar Data Manipulations. https://github.com/krlmlr/duckplyr, https://krlmlr.github.io/duckplyr/.","code":"@Manual{,   title = {duckplyr: Alternative Implementations of the Grammar of Data Manipulations},   author = {Hannes Mühleisen and Kirill Müller},   year = {2023},   note = {https://github.com/krlmlr/duckplyr, https://krlmlr.github.io/duckplyr/}, }"},{"path":"https://krlmlr.github.io/duckplyr/index.html","id":"duckplyr","dir":"","previous_headings":"","what":"Alternative Implementations of the Grammar of Data Manipulations","title":"Alternative Implementations of the Grammar of Data Manipulations","text":"goal duckplyr define set generics provide low-level implementer’s interface dplyr’s high-level user interface.","code":""},{"path":"https://krlmlr.github.io/duckplyr/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Alternative Implementations of the Grammar of Data Manipulations","text":"can install development version duckplyr GitHub :","code":"# install.packages(\"pak\", repos = sprintf(\"https://r-lib.github.io/p/pak/stable/%s/%s/%s\", .Platform$pkgType, R.Version()$os, R.Version()$arch)) pak::pak(\"krlmlr/duckplyr\")"},{"path":"https://krlmlr.github.io/duckplyr/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Alternative Implementations of the Grammar of Data Manipulations","text":"package provides generics, packages may implement methods.","code":"library(duckplyr)  rel_to_df.dfrel <- function(rel, ...) {  unclass(rel)[[1]] }  rel_limit.dfrel <- function(rel, n, ...) {   new_relational(     list(head(unclass(rel)[[1]], n)),     class = \"dfrel\"   ) }  mtcars_rel <- new_relational(list(mtcars), class = \"dfrel\") mtcars_rel |>   rel_limit(5) |>   rel_to_df() #>                    mpg cyl disp  hp drat    wt  qsec vs am gear carb #> Mazda RX4         21.0   6  160 110 3.90 2.620 16.46  0  1    4    4 #> Mazda RX4 Wag     21.0   6  160 110 3.90 2.875 17.02  0  1    4    4 #> Datsun 710        22.8   4  108  93 3.85 2.320 18.61  1  1    4    1 #> Hornet 4 Drive    21.4   6  258 110 3.08 3.215 19.44  1  0    3    1 #> Hornet Sportabout 18.7   8  360 175 3.15 3.440 17.02  0  0    3    2"},{"path":"https://krlmlr.github.io/duckplyr/reference/new_relational.html","id":null,"dir":"Reference","previous_headings":"","what":"Relational API — new_relational","title":"Relational API — new_relational","text":"TBD.","code":""},{"path":"https://krlmlr.github.io/duckplyr/reference/new_relational.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Relational API — new_relational","text":"","code":"new_relational(..., class = NULL)"},{"path":"https://krlmlr.github.io/duckplyr/reference/new_relational.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Relational API — new_relational","text":"... Passed [structure()] class Classes added front `\"relational\"` base class","code":""},{"path":"https://krlmlr.github.io/duckplyr/reference/new_relational.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Relational API — new_relational","text":"(new/modified) relational object.","code":""},{"path":"https://krlmlr.github.io/duckplyr/reference/new_relational.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Relational API — new_relational","text":"","code":"mtcars_rel <- new_relational(list(mtcars), class = \"dfrel\")"},{"path":"https://krlmlr.github.io/duckplyr/reference/rel.html","id":null,"dir":"Reference","previous_headings":"","what":"TBD — rel_tostring","title":"TBD — rel_tostring","text":"TBD.","code":""},{"path":"https://krlmlr.github.io/duckplyr/reference/rel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"TBD — rel_tostring","text":"","code":"rel_tostring(rel, ...)  rel_names(rel, ...)"},{"path":"https://krlmlr.github.io/duckplyr/reference/rel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"TBD — rel_tostring","text":"rel relation object. ... Reserved future extensions, must empty.","code":""},{"path":"https://krlmlr.github.io/duckplyr/reference/rel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"TBD — rel_tostring","text":"(new/modified) relational object. (new/modified) relational object.","code":""},{"path":"https://krlmlr.github.io/duckplyr/reference/rel_aggregate.html","id":null,"dir":"Reference","previous_headings":"","what":"Lazily aggregate a relation object — rel_aggregate","title":"Lazily aggregate a relation object — rel_aggregate","text":"TBD.","code":""},{"path":"https://krlmlr.github.io/duckplyr/reference/rel_aggregate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Lazily aggregate a relation object — rel_aggregate","text":"","code":"rel_aggregate(rel, groups, aggregates, ...)"},{"path":"https://krlmlr.github.io/duckplyr/reference/rel_aggregate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Lazily aggregate a relation object — rel_aggregate","text":"rel relation object. groups list DuckDB expressions group aggregates (optionally named) list DuckDB expressions aggregates compute ... Reserved future extensions, must empty.","code":""},{"path":"https://krlmlr.github.io/duckplyr/reference/rel_aggregate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Lazily aggregate a relation object — rel_aggregate","text":"now aggregated relation object","code":""},{"path":"https://krlmlr.github.io/duckplyr/reference/rel_aggregate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Lazily aggregate a relation object — rel_aggregate","text":"","code":"if (FALSE) { rel <- rel_from_df(mtcars) aggrs <- list(avg_hp = relexpr_function(\"avg\", list(relexpr_reference(\"hp\")))) rel2 <- rel_aggregate(rel, list(relexpr_reference(\"cyl\")), aggrs) }"},{"path":"https://krlmlr.github.io/duckplyr/reference/rel_alias.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the internal alias for a relation object — rel_alias","title":"Get the internal alias for a relation object — rel_alias","text":"TBD.","code":""},{"path":"https://krlmlr.github.io/duckplyr/reference/rel_alias.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the internal alias for a relation object — rel_alias","text":"","code":"rel_alias(rel, ...)"},{"path":"https://krlmlr.github.io/duckplyr/reference/rel_alias.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the internal alias for a relation object — rel_alias","text":"rel relation object. ... Reserved future extensions, must empty.","code":""},{"path":"https://krlmlr.github.io/duckplyr/reference/rel_alias.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the internal alias for a relation object — rel_alias","text":"alias (character).","code":""},{"path":"https://krlmlr.github.io/duckplyr/reference/rel_alias.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the internal alias for a relation object — rel_alias","text":"","code":"mtcars_rel <- new_relational(mtcars, class = \"dfrel\") rel_alias.dfrel <- function(rel, ...) tracemem(rel) rel_alias(mtcars_rel) #> [1] \"<0x5629c2810b28>\""},{"path":"https://krlmlr.github.io/duckplyr/reference/rel_distinct.html","id":null,"dir":"Reference","previous_headings":"","what":"Lazily compute a distinct result on a relation object — rel_distinct","title":"Lazily compute a distinct result on a relation object — rel_distinct","text":"TBD.","code":""},{"path":"https://krlmlr.github.io/duckplyr/reference/rel_distinct.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Lazily compute a distinct result on a relation object — rel_distinct","text":"","code":"rel_distinct(rel, ...)"},{"path":"https://krlmlr.github.io/duckplyr/reference/rel_distinct.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Lazily compute a distinct result on a relation object — rel_distinct","text":"rel relation object. ... Reserved future extensions, must empty.","code":""},{"path":"https://krlmlr.github.io/duckplyr/reference/rel_distinct.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Lazily compute a distinct result on a relation object — rel_distinct","text":"new relation object distinct rows","code":""},{"path":"https://krlmlr.github.io/duckplyr/reference/rel_distinct.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Lazily compute a distinct result on a relation object — rel_distinct","text":"","code":"rel <- new_relational(c(\"a\", \"a\", \"b\"), class = \"vecrel\") rel_distinct.vecrel <- function(rel, ...) {   class(rel) <- setdiff(class(rel), \"relational\")   new_relational(unique(rel), class = class(rel)) } rel_distinct(rel) #> [1] \"a\" \"b\" #> attr(,\"class\") #> [1] \"vecrel\"     \"relational\""},{"path":"https://krlmlr.github.io/duckplyr/reference/rel_explain.html","id":null,"dir":"Reference","previous_headings":"","what":"Print the EXPLAIN output for a relation object — rel_explain","title":"Print the EXPLAIN output for a relation object — rel_explain","text":"TBD.","code":""},{"path":"https://krlmlr.github.io/duckplyr/reference/rel_explain.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print the EXPLAIN output for a relation object — rel_explain","text":"","code":"rel_explain(rel, ...)"},{"path":"https://krlmlr.github.io/duckplyr/reference/rel_explain.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print the EXPLAIN output for a relation object — rel_explain","text":"rel relation object. ... Reserved future extensions, must empty.","code":""},{"path":"https://krlmlr.github.io/duckplyr/reference/rel_explain.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print the EXPLAIN output for a relation object — rel_explain","text":"(new/modified) relational object.","code":""},{"path":"https://krlmlr.github.io/duckplyr/reference/rel_explain.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print the EXPLAIN output for a relation object — rel_explain","text":"","code":"mtcars_rel <- new_relational(mtcars, class = \"dfrel\") rel_explain.dfrel <- function(rel, ...) {   cat(\"A relational object\")   print(rel)   invisible(rel) } rel_explain(mtcars_rel) #> A relational object$mpg #>  [1] 21.0 21.0 22.8 21.4 18.7 18.1 14.3 24.4 22.8 19.2 17.8 16.4 17.3 15.2 10.4 #> [16] 10.4 14.7 32.4 30.4 33.9 21.5 15.5 15.2 13.3 19.2 27.3 26.0 30.4 15.8 19.7 #> [31] 15.0 21.4 #>  #> $cyl #>  [1] 6 6 4 6 8 6 8 4 4 6 6 8 8 8 8 8 8 4 4 4 4 8 8 8 8 4 4 4 8 6 8 4 #>  #> $disp #>  [1] 160.0 160.0 108.0 258.0 360.0 225.0 360.0 146.7 140.8 167.6 167.6 275.8 #> [13] 275.8 275.8 472.0 460.0 440.0  78.7  75.7  71.1 120.1 318.0 304.0 350.0 #> [25] 400.0  79.0 120.3  95.1 351.0 145.0 301.0 121.0 #>  #> $hp #>  [1] 110 110  93 110 175 105 245  62  95 123 123 180 180 180 205 215 230  66  52 #> [20]  65  97 150 150 245 175  66  91 113 264 175 335 109 #>  #> $drat #>  [1] 3.90 3.90 3.85 3.08 3.15 2.76 3.21 3.69 3.92 3.92 3.92 3.07 3.07 3.07 2.93 #> [16] 3.00 3.23 4.08 4.93 4.22 3.70 2.76 3.15 3.73 3.08 4.08 4.43 3.77 4.22 3.62 #> [31] 3.54 4.11 #>  #> $wt #>  [1] 2.620 2.875 2.320 3.215 3.440 3.460 3.570 3.190 3.150 3.440 3.440 4.070 #> [13] 3.730 3.780 5.250 5.424 5.345 2.200 1.615 1.835 2.465 3.520 3.435 3.840 #> [25] 3.845 1.935 2.140 1.513 3.170 2.770 3.570 2.780 #>  #> $qsec #>  [1] 16.46 17.02 18.61 19.44 17.02 20.22 15.84 20.00 22.90 18.30 18.90 17.40 #> [13] 17.60 18.00 17.98 17.82 17.42 19.47 18.52 19.90 20.01 16.87 17.30 15.41 #> [25] 17.05 18.90 16.70 16.90 14.50 15.50 14.60 18.60 #>  #> $vs #>  [1] 0 0 1 1 0 1 0 1 1 1 1 0 0 0 0 0 0 1 1 1 1 0 0 0 0 1 0 1 0 0 0 1 #>  #> $am #>  [1] 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 1 1 1 1 1 1 1 #>  #> $gear #>  [1] 4 4 4 3 3 3 3 4 4 4 4 3 3 3 3 3 3 4 4 4 3 3 3 3 3 4 5 5 5 5 5 4 #>  #> $carb #>  [1] 4 4 1 1 2 1 4 2 2 4 4 3 3 3 4 4 4 1 2 1 1 2 2 4 2 1 2 2 4 6 8 2 #>  #> attr(,\"row.names\") #>  [1] \"Mazda RX4\"           \"Mazda RX4 Wag\"       \"Datsun 710\"          #>  [4] \"Hornet 4 Drive\"      \"Hornet Sportabout\"   \"Valiant\"             #>  [7] \"Duster 360\"          \"Merc 240D\"           \"Merc 230\"            #> [10] \"Merc 280\"            \"Merc 280C\"           \"Merc 450SE\"          #> [13] \"Merc 450SL\"          \"Merc 450SLC\"         \"Cadillac Fleetwood\"  #> [16] \"Lincoln Continental\" \"Chrysler Imperial\"   \"Fiat 128\"            #> [19] \"Honda Civic\"         \"Toyota Corolla\"      \"Toyota Corona\"       #> [22] \"Dodge Challenger\"    \"AMC Javelin\"         \"Camaro Z28\"          #> [25] \"Pontiac Firebird\"    \"Fiat X1-9\"           \"Porsche 914-2\"       #> [28] \"Lotus Europa\"        \"Ford Pantera L\"      \"Ferrari Dino\"        #> [31] \"Maserati Bora\"       \"Volvo 142E\"          #> attr(,\"class\") #> [1] \"dfrel\"      \"relational\""},{"path":"https://krlmlr.github.io/duckplyr/reference/rel_filter.html","id":null,"dir":"Reference","previous_headings":"","what":"Lazily filter a relation object — rel_filter","title":"Lazily filter a relation object — rel_filter","text":"TBD.","code":""},{"path":"https://krlmlr.github.io/duckplyr/reference/rel_filter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Lazily filter a relation object — rel_filter","text":"","code":"rel_filter(rel, exprs, ...)"},{"path":"https://krlmlr.github.io/duckplyr/reference/rel_filter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Lazily filter a relation object — rel_filter","text":"rel relation object. exprs list DuckDB expressions filter ... Reserved future extensions, must empty.","code":""},{"path":"https://krlmlr.github.io/duckplyr/reference/rel_filter.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Lazily filter a relation object — rel_filter","text":"now filtered relation object","code":""},{"path":"https://krlmlr.github.io/duckplyr/reference/rel_filter.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Lazily filter a relation object — rel_filter","text":"","code":"if (FALSE) { rel <- rel_from_df(mtcars) rel2 <- rel_filter(   rel,   list(     relexpr_function(       \"gt\",       list(relexpr_reference(\"cyl\"), relexpr_constant(\"6\")))   ) ) }"},{"path":"https://krlmlr.github.io/duckplyr/reference/rel_join.html","id":null,"dir":"Reference","previous_headings":"","what":"Lazily INNER join two relation objects — rel_join","title":"Lazily INNER join two relation objects — rel_join","text":"TBD.","code":""},{"path":"https://krlmlr.github.io/duckplyr/reference/rel_join.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Lazily INNER join two relation objects — rel_join","text":"","code":"rel_join(left, right, conds, join, ...)"},{"path":"https://krlmlr.github.io/duckplyr/reference/rel_join.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Lazily INNER join two relation objects — rel_join","text":"left left-hand-side relation object right right-hand-side relation object conds list DuckDB expressions use join join type join ... Reserved future extensions, must empty.","code":""},{"path":"https://krlmlr.github.io/duckplyr/reference/rel_join.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Lazily INNER join two relation objects — rel_join","text":"new relation object resulting join","code":""},{"path":"https://krlmlr.github.io/duckplyr/reference/rel_join.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Lazily INNER join two relation objects — rel_join","text":"","code":"if (FALSE) { left <- rel_from_df(mtcars) right <- rel_from_df(mtcars) cond <- list(   relexpr_function(     \"eq\",     list(relexpr_reference(\"cyl\", left), relexpr_reference(\"cyl\", right))   ) ) rel2 <- rel_join(left, right, cond) }"},{"path":"https://krlmlr.github.io/duckplyr/reference/rel_limit.html","id":null,"dir":"Reference","previous_headings":"","what":"Lazily limit the rows in a relation object — rel_limit","title":"Lazily limit the rows in a relation object — rel_limit","text":"TBD.","code":""},{"path":"https://krlmlr.github.io/duckplyr/reference/rel_limit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Lazily limit the rows in a relation object — rel_limit","text":"","code":"rel_limit(rel, n, ...)"},{"path":"https://krlmlr.github.io/duckplyr/reference/rel_limit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Lazily limit the rows in a relation object — rel_limit","text":"rel relation object. n number rows. ... Reserved future extensions, must empty.","code":""},{"path":"https://krlmlr.github.io/duckplyr/reference/rel_limit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Lazily limit the rows in a relation object — rel_limit","text":"(new/modified) relational object.","code":""},{"path":"https://krlmlr.github.io/duckplyr/reference/rel_limit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Lazily limit the rows in a relation object — rel_limit","text":"","code":"mtcars_rel <- new_relational(list(mtcars), class = \"dfrel\") rel_limit.dfrel <- function(rel, n, ...) {   new_relational(     head(unclass(rel)[[1]], n),     class = \"dfrel\"   ) }"},{"path":"https://krlmlr.github.io/duckplyr/reference/rel_order.html","id":null,"dir":"Reference","previous_headings":"","what":"Lazily reorder a relation object — rel_order","title":"Lazily reorder a relation object — rel_order","text":"TBD.","code":""},{"path":"https://krlmlr.github.io/duckplyr/reference/rel_order.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Lazily reorder a relation object — rel_order","text":"","code":"rel_order(rel, orders, ...)"},{"path":"https://krlmlr.github.io/duckplyr/reference/rel_order.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Lazily reorder a relation object — rel_order","text":"rel relation object. orders list DuckDB expressions order ... Reserved future extensions, must empty.","code":""},{"path":"https://krlmlr.github.io/duckplyr/reference/rel_order.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Lazily reorder a relation object — rel_order","text":"now aggregated relation object","code":""},{"path":"https://krlmlr.github.io/duckplyr/reference/rel_order.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Lazily reorder a relation object — rel_order","text":"","code":"if (FALSE) { rel <- rel_from_df(mtcars) rel2 <- rel_order(rel, list(relexpr_reference(\"hp\"))) }"},{"path":"https://krlmlr.github.io/duckplyr/reference/rel_project.html","id":null,"dir":"Reference","previous_headings":"","what":"Lazily project a relation object — rel_project","title":"Lazily project a relation object — rel_project","text":"TBD.","code":""},{"path":"https://krlmlr.github.io/duckplyr/reference/rel_project.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Lazily project a relation object — rel_project","text":"","code":"rel_project(rel, exprs, ...)"},{"path":"https://krlmlr.github.io/duckplyr/reference/rel_project.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Lazily project a relation object — rel_project","text":"rel relation object. exprs list DuckDB expressions project ... Reserved future extensions, must empty.","code":""},{"path":"https://krlmlr.github.io/duckplyr/reference/rel_project.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Lazily project a relation object — rel_project","text":"now projected relation object","code":""},{"path":"https://krlmlr.github.io/duckplyr/reference/rel_project.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Lazily project a relation object — rel_project","text":"","code":"if (FALSE) { rel <- rel_from_df(mtcars) rel2 <- rel_project(rel, list(relexpr_reference(\"cyl\"), relexpr_reference(\"disp\"))) }"},{"path":"https://krlmlr.github.io/duckplyr/reference/rel_set_alias.html","id":null,"dir":"Reference","previous_headings":"","what":"Set the internal alias for a relation object — rel_set_alias","title":"Set the internal alias for a relation object — rel_set_alias","text":"TBD.","code":""},{"path":"https://krlmlr.github.io/duckplyr/reference/rel_set_alias.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set the internal alias for a relation object — rel_set_alias","text":"","code":"rel_set_alias(rel, alias, ...)"},{"path":"https://krlmlr.github.io/duckplyr/reference/rel_set_alias.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set the internal alias for a relation object — rel_set_alias","text":"rel relation object. alias new alias ... Reserved future extensions, must empty.","code":""},{"path":"https://krlmlr.github.io/duckplyr/reference/rel_set_alias.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set the internal alias for a relation object — rel_set_alias","text":"(new/modified) relational object.","code":""},{"path":"https://krlmlr.github.io/duckplyr/reference/rel_set_alias.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set the internal alias for a relation object — rel_set_alias","text":"","code":"mtcars_rel <- new_relational(mtcars, class = \"dfrel\") rel_set_alias.dfrel <- function(rel, alias,...) {   attr(rel, \"alias\") <- alias   rel } mtcars_rel <- rel_set_alias(mtcars_rel, \"blop\") attr(mtcars_rel, \"alias\") #> [1] \"blop\""},{"path":"https://krlmlr.github.io/duckplyr/reference/rel_set_diff.html","id":null,"dir":"Reference","previous_headings":"","what":"Lazily compute a set_diff result on a relation object — rel_set_diff","title":"Lazily compute a set_diff result on a relation object — rel_set_diff","text":"TBD.","code":""},{"path":"https://krlmlr.github.io/duckplyr/reference/rel_set_diff.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Lazily compute a set_diff result on a relation object — rel_set_diff","text":"","code":"rel_set_diff(rel_a, rel_b, ...)"},{"path":"https://krlmlr.github.io/duckplyr/reference/rel_set_diff.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Lazily compute a set_diff result on a relation object — rel_set_diff","text":"rel_a DuckDB relation object rel_b DuckDB relation object ... Reserved future extensions, must empty.","code":""},{"path":"https://krlmlr.github.io/duckplyr/reference/rel_set_diff.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Lazily compute a set_diff result on a relation object — rel_set_diff","text":"new relation object result","code":""},{"path":"https://krlmlr.github.io/duckplyr/reference/rel_set_diff.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Lazily compute a set_diff result on a relation object — rel_set_diff","text":"","code":"rel_a <- new_relational(c(1, 1, 2), class = \"vecrel\") rel_b <- new_relational(c(1, 3, 2), class = \"vecrel\") rel_set_diff.vecrel <- function(rel_a, rel_b, ...) {   new_relational(setdiff(rel_a, rel_b), class = class(rel_a)) } rel_set_diff(rel_a, rel_b) #> numeric(0) #> attr(,\"class\") #> [1] \"vecrel\"     \"relational\""},{"path":"https://krlmlr.github.io/duckplyr/reference/rel_set_intersect.html","id":null,"dir":"Reference","previous_headings":"","what":"Lazily compute a set_intersect result on a relation object — rel_set_intersect","title":"Lazily compute a set_intersect result on a relation object — rel_set_intersect","text":"TBD.","code":""},{"path":"https://krlmlr.github.io/duckplyr/reference/rel_set_intersect.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Lazily compute a set_intersect result on a relation object — rel_set_intersect","text":"","code":"rel_set_intersect(rel_a, rel_b, ...)"},{"path":"https://krlmlr.github.io/duckplyr/reference/rel_set_intersect.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Lazily compute a set_intersect result on a relation object — rel_set_intersect","text":"rel_a DuckDB relation object rel_b DuckDB relation object ... Reserved future extensions, must empty.","code":""},{"path":"https://krlmlr.github.io/duckplyr/reference/rel_set_intersect.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Lazily compute a set_intersect result on a relation object — rel_set_intersect","text":"new relation object result","code":""},{"path":"https://krlmlr.github.io/duckplyr/reference/rel_set_intersect.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Lazily compute a set_intersect result on a relation object — rel_set_intersect","text":"","code":"rel_a <- new_relational(c(1, 1, 2), class = \"vecrel\") rel_b <- new_relational(c(1, 3, 2), class = \"vecrel\") rel_set_intersect.vecrel <- function(rel_a, rel_b, ...) {   new_relational(intersect(rel_a, rel_b), class = class(rel_a)) } rel_set_intersect(rel_a, rel_b) #> [1] 1 2 #> attr(,\"class\") #> [1] \"vecrel\"     \"relational\""},{"path":"https://krlmlr.github.io/duckplyr/reference/rel_set_symdiff.html","id":null,"dir":"Reference","previous_headings":"","what":"Lazily compute a set_symdiff result on a relation object — rel_set_symdiff","title":"Lazily compute a set_symdiff result on a relation object — rel_set_symdiff","text":"TBD.","code":""},{"path":"https://krlmlr.github.io/duckplyr/reference/rel_set_symdiff.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Lazily compute a set_symdiff result on a relation object — rel_set_symdiff","text":"","code":"rel_set_symdiff(rel_a, rel_b, ...)"},{"path":"https://krlmlr.github.io/duckplyr/reference/rel_set_symdiff.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Lazily compute a set_symdiff result on a relation object — rel_set_symdiff","text":"rel_a DuckDB relation object rel_b DuckDB relation object ... Reserved future extensions, must empty.","code":""},{"path":"https://krlmlr.github.io/duckplyr/reference/rel_set_symdiff.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Lazily compute a set_symdiff result on a relation object — rel_set_symdiff","text":"new relation object result","code":""},{"path":"https://krlmlr.github.io/duckplyr/reference/rel_set_symdiff.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Lazily compute a set_symdiff result on a relation object — rel_set_symdiff","text":"","code":"rel_a <- new_relational(c(1, 1, 2), class = \"vecrel\") rel_b <- new_relational(c(1, 3, 2), class = \"vecrel\") rel_set_symdiff.vecrel <- function(rel_a, rel_b, ...) {   class(rel_a) <- setdiff(class(rel_a), \"relational\")   class(rel_b) <- setdiff(class(rel_b), \"relational\")   new_relational(     unique(c(setdiff(rel_a, rel_b), setdiff(rel_b, rel_a))),     class = class(rel_a)   ) } rel_set_symdiff(rel_a, rel_b) #> [1] 3 #> attr(,\"class\") #> [1] \"vecrel\"     \"relational\""},{"path":"https://krlmlr.github.io/duckplyr/reference/rel_to_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert a relation object to a data frame — rel_to_df","title":"Convert a relation object to a data frame — rel_to_df","text":"TBD.","code":""},{"path":"https://krlmlr.github.io/duckplyr/reference/rel_to_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert a relation object to a data frame — rel_to_df","text":"","code":"rel_to_df(rel, ...)"},{"path":"https://krlmlr.github.io/duckplyr/reference/rel_to_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert a relation object to a data frame — rel_to_df","text":"rel relation object. ... Reserved future extensions, must empty.","code":""},{"path":"https://krlmlr.github.io/duckplyr/reference/rel_to_df.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert a relation object to a data frame — rel_to_df","text":"data frame.","code":""},{"path":"https://krlmlr.github.io/duckplyr/reference/rel_to_df.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert a relation object to a data frame — rel_to_df","text":"","code":"mtcars_rel <- new_relational(list(mtcars), class = \"dfrel\") rel_to_df.dfrel <- function(rel, ...) {   unclass(rel)[[1]] } rel_to_df(mtcars_rel) #>                      mpg cyl  disp  hp drat    wt  qsec vs am gear carb #> Mazda RX4           21.0   6 160.0 110 3.90 2.620 16.46  0  1    4    4 #> Mazda RX4 Wag       21.0   6 160.0 110 3.90 2.875 17.02  0  1    4    4 #> Datsun 710          22.8   4 108.0  93 3.85 2.320 18.61  1  1    4    1 #> Hornet 4 Drive      21.4   6 258.0 110 3.08 3.215 19.44  1  0    3    1 #> Hornet Sportabout   18.7   8 360.0 175 3.15 3.440 17.02  0  0    3    2 #> Valiant             18.1   6 225.0 105 2.76 3.460 20.22  1  0    3    1 #> Duster 360          14.3   8 360.0 245 3.21 3.570 15.84  0  0    3    4 #> Merc 240D           24.4   4 146.7  62 3.69 3.190 20.00  1  0    4    2 #> Merc 230            22.8   4 140.8  95 3.92 3.150 22.90  1  0    4    2 #> Merc 280            19.2   6 167.6 123 3.92 3.440 18.30  1  0    4    4 #> Merc 280C           17.8   6 167.6 123 3.92 3.440 18.90  1  0    4    4 #> Merc 450SE          16.4   8 275.8 180 3.07 4.070 17.40  0  0    3    3 #> Merc 450SL          17.3   8 275.8 180 3.07 3.730 17.60  0  0    3    3 #> Merc 450SLC         15.2   8 275.8 180 3.07 3.780 18.00  0  0    3    3 #> Cadillac Fleetwood  10.4   8 472.0 205 2.93 5.250 17.98  0  0    3    4 #> Lincoln Continental 10.4   8 460.0 215 3.00 5.424 17.82  0  0    3    4 #> Chrysler Imperial   14.7   8 440.0 230 3.23 5.345 17.42  0  0    3    4 #> Fiat 128            32.4   4  78.7  66 4.08 2.200 19.47  1  1    4    1 #> Honda Civic         30.4   4  75.7  52 4.93 1.615 18.52  1  1    4    2 #> Toyota Corolla      33.9   4  71.1  65 4.22 1.835 19.90  1  1    4    1 #> Toyota Corona       21.5   4 120.1  97 3.70 2.465 20.01  1  0    3    1 #> Dodge Challenger    15.5   8 318.0 150 2.76 3.520 16.87  0  0    3    2 #> AMC Javelin         15.2   8 304.0 150 3.15 3.435 17.30  0  0    3    2 #> Camaro Z28          13.3   8 350.0 245 3.73 3.840 15.41  0  0    3    4 #> Pontiac Firebird    19.2   8 400.0 175 3.08 3.845 17.05  0  0    3    2 #> Fiat X1-9           27.3   4  79.0  66 4.08 1.935 18.90  1  1    4    1 #> Porsche 914-2       26.0   4 120.3  91 4.43 2.140 16.70  0  1    5    2 #> Lotus Europa        30.4   4  95.1 113 3.77 1.513 16.90  1  1    5    2 #> Ford Pantera L      15.8   8 351.0 264 4.22 3.170 14.50  0  1    5    4 #> Ferrari Dino        19.7   6 145.0 175 3.62 2.770 15.50  0  1    5    6 #> Maserati Bora       15.0   8 301.0 335 3.54 3.570 14.60  0  1    5    8 #> Volvo 142E          21.4   4 121.0 109 4.11 2.780 18.60  1  1    4    2"},{"path":"https://krlmlr.github.io/duckplyr/reference/rel_union_all.html","id":null,"dir":"Reference","previous_headings":"","what":"Lazily compute a set_union_all result on a relation object — rel_union_all","title":"Lazily compute a set_union_all result on a relation object — rel_union_all","text":"TBD.","code":""},{"path":"https://krlmlr.github.io/duckplyr/reference/rel_union_all.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Lazily compute a set_union_all result on a relation object — rel_union_all","text":"","code":"rel_union_all(rel_a, rel_b, ...)"},{"path":"https://krlmlr.github.io/duckplyr/reference/rel_union_all.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Lazily compute a set_union_all result on a relation object — rel_union_all","text":"rel_a DuckDB relation object rel_b DuckDB relation object ... Reserved future extensions, must empty.","code":""},{"path":"https://krlmlr.github.io/duckplyr/reference/rel_union_all.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Lazily compute a set_union_all result on a relation object — rel_union_all","text":"new relation object result","code":""},{"path":"https://krlmlr.github.io/duckplyr/reference/rel_union_all.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Lazily compute a set_union_all result on a relation object — rel_union_all","text":"","code":"rel_a <- new_relational(c(1, 1, 2), class = \"vecrel\") rel_b <- new_relational(c(1, 3, 2), class = \"vecrel\") rel_union_all.vecrel <- function(rel_a, rel_b, ...) {   new_relational(union(rel_a, rel_b), class = class(rel_a)) } rel_union_all(rel_a, rel_b) #> [1] 1 2 3 #> attr(,\"class\") #> [1] \"vecrel\"     \"relational\""}]
